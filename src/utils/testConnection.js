/**
 * testConnection.js - Utilidad para probar conexi√≥n al backend
 * 
 * Uso: Copiar y pegar en la consola del navegador para probar la conexi√≥n
 * 
 * @author Indiana Usados
 * @version 1.0.0
 */

// Funci√≥n para probar la conexi√≥n al backend
export const testBackendConnection = async () => {
    console.log('üß™ INICIANDO PRUEBA DE CONEXI√ìN AL BACKEND')
    console.log('=' .repeat(50))
    
    try {
        // 1. Verificar configuraci√≥n
        console.log('1Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN...')
        const config = await import('@config')
        console.log('‚úÖ Configuraci√≥n cargada:', {
            baseURL: config.default.api.baseURL,
            timeout: config.default.api.timeout,
            mock: config.default.api.mock,
            environment: config.default.environment
        })
        
        // 2. Verificar axios instance
        console.log('\n2Ô∏è‚É£ VERIFICANDO INSTANCIA AXIOS...')
        const { axiosInstance } = await import('@api')
        console.log('‚úÖ Axios instance configurada:', {
            baseURL: axiosInstance.defaults.baseURL,
            timeout: axiosInstance.defaults.timeout,
            headers: axiosInstance.defaults.headers
        })
        
        // 3. Probar endpoint GET
        console.log('\n3Ô∏è‚É£ PROBANDO ENDPOINT GET /photos/getallphotos...')
        const getResponse = await axiosInstance.get('/photos/getallphotos', {
            params: { limit: 2, page: 1 }
        })
        console.log('‚úÖ GET exitoso:', {
            status: getResponse.status,
            statusText: getResponse.statusText,
            dataLength: getResponse.data ? (Array.isArray(getResponse.data) ? getResponse.data.length : 'No es array') : 'No data',
            sample: getResponse.data ? (Array.isArray(getResponse.data) ? getResponse.data.slice(0, 1) : getResponse.data) : 'No data'
        })
        
        // 4. Probar endpoint POST
        console.log('\n4Ô∏è‚É£ PROBANDO ENDPOINT POST /photos/getallphotos...')
        const postResponse = await axiosInstance.post('/photos/getallphotos', {
            filters: {},
            pagination: { limit: 2, page: 1 }
        })
        console.log('‚úÖ POST exitoso:', {
            status: postResponse.status,
            statusText: postResponse.statusText,
            dataLength: postResponse.data ? (Array.isArray(postResponse.data) ? postResponse.data.length : 'No es array') : 'No data'
        })
        
        // 5. Resumen final
        console.log('\nüéâ PRUEBA COMPLETADA EXITOSAMENTE!')
        console.log('‚úÖ Backend conectado correctamente')
        console.log('‚úÖ Endpoints funcionando')
        console.log('‚úÖ Configuraci√≥n correcta')
        
    } catch (error) {
        console.error('\n‚ùå ERROR EN LA PRUEBA DE CONEXI√ìN')
        console.error('üö® Error:', {
            message: error.message,
            name: error.name,
            code: error.code
        })
        
        if (error.response) {
            console.error('üì° Error del servidor:', {
                status: error.response.status,
                statusText: error.response.statusText,
                data: error.response.data
            })
        } else if (error.request) {
            console.error('üåê Error de red:', {
                message: 'No se recibi√≥ respuesta del servidor',
                request: error.request
            })
        } else {
            console.error('‚öôÔ∏è Error de configuraci√≥n:', {
                message: 'Error al configurar la petici√≥n'
            })
        }
        
        console.log('\nüîß POSIBLES SOLUCIONES:')
        console.log('1. Verificar que el backend est√© corriendo en localhost:3001')
        console.log('2. Verificar que el endpoint /photos/getallphotos exista')
        console.log('3. Verificar configuraci√≥n CORS en el backend')
        console.log('4. Verificar variables de entorno en .env')
    }
}

// Funci√≥n para probar solo la configuraci√≥n
export const testConfig = async () => {
    console.log('üîß VERIFICANDO CONFIGURACI√ìN...')
    try {
        const config = await import('@config')
        console.log('‚úÖ Configuraci√≥n:', config.default)
        return config.default
    } catch (error) {
        console.error('‚ùå Error cargando configuraci√≥n:', error)
        return null
    }
}

// Funci√≥n para probar solo axios
export const testAxios = async () => {
    console.log('üîß VERIFICANDO AXIOS...')
    try {
        const { axiosInstance } = await import('@api')
        console.log('‚úÖ Axios instance:', {
            baseURL: axiosInstance.defaults.baseURL,
            timeout: axiosInstance.defaults.timeout,
            headers: axiosInstance.defaults.headers
        })
        return axiosInstance
    } catch (error) {
        console.error('‚ùå Error cargando axios:', error)
        return null
    }
}

// Funci√≥n para hacer una petici√≥n simple
export const simpleRequest = async () => {
    console.log('üîß HACIENDO PETICI√ìN SIMPLE...')
    try {
        const { axiosInstance } = await import('@api')
        const response = await axiosInstance.get('/photos/getallphotos?limit=1&page=1')
        console.log('‚úÖ Respuesta simple:', {
            status: response.status,
            data: response.data
        })
        return response
    } catch (error) {
        console.error('‚ùå Error en petici√≥n simple:', error)
        return null
    }
}

// Exportar funciones para uso en consola
if (typeof window !== 'undefined') {
    window.testBackendConnection = testBackendConnection
    window.testConfig = testConfig
    window.testAxios = testAxios
    window.simpleRequest = simpleRequest
    
    console.log('üß™ FUNCIONES DE PRUEBA DISPONIBLES:')
    console.log('- testBackendConnection() - Prueba completa de conexi√≥n')
    console.log('- testConfig() - Verifica configuraci√≥n')
    console.log('- testAxios() - Verifica instancia axios')
    console.log('- simpleRequest() - Hace una petici√≥n simple')
}
