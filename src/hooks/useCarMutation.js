/**
 * useCarMutation.js - Hook simple para mutaci√≥n de autos
 * 
 * @author Indiana Usados
 * @version 2.0.0 - Agregado updateCar para modo EDIT
 */

import { useState } from 'react'
import { AUTH_CONFIG } from '@config/auth'
import { validateImageFields, prepareMultipleImagesForUpload } from '@utils/imageUtils'
import { vehiclesService } from '@services/vehiclesApi'

// ‚úÖ FUNCI√ìN SIMPLE PARA OBTENER TOKEN
const getAuthToken = () => {
    try {
        // ‚úÖ USAR LA MISMA CLAVE QUE useAuth
        const token = localStorage.getItem(AUTH_CONFIG.storage.tokenKey)
        return token
    } catch (error) {
        console.error('‚ùå Error al obtener token:', error)
        return null
    }
}

export const useCarMutation = () => {
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState(null)
    const [success, setSuccess] = useState(false)

    const createCar = async (formData) => {
        setIsLoading(true)
        setError(null)
        setSuccess(false)

        try {
            console.log('üöÄ Enviando formulario al endpoint...')
            
            // ‚úÖ EXTRAER ARCHIVOS DE IMAGEN DEL FORMDATA
            const imageFiles = {}
            const dataFields = {}
            
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    // ‚úÖ MANEJAR M√öLTIPLES ARCHIVOS CON EL MISMO NOMBRE
                    if (imageFiles[key]) {
                        imageFiles[key].push(value)
                    } else {
                        imageFiles[key] = [value]
                    }
                } else {
                    dataFields[key] = value
                }
            }
            
            // ‚úÖ LOG RESUMIDO DE ARCHIVOS
            console.log('üìÅ Archivos extra√≠dos:', Object.keys(imageFiles).map(key => 
                `${key}: ${imageFiles[key].length} archivo(s)`
            ).join(', '))
            
            // ‚úÖ VALIDAR ARCHIVOS DE IMAGEN
            const imageErrors = validateImageFields(imageFiles)
            if (Object.keys(imageErrors).length > 0) {
                throw new Error(`Errores de imagen: ${Object.values(imageErrors).join(', ')}`)
            }
            
            // ‚úÖ PREPARAR ARCHIVOS PARA ENV√çO
            const preparedImages = prepareMultipleImagesForUpload(imageFiles)
            
            // ‚úÖ CREAR FORMDATA SIMPLE (NO necesitamos preparar archivos)
            const cloudinaryFormData = new FormData()
            
            // Agregar campos de datos
            Object.entries(dataFields).forEach(([key, value]) => {
                cloudinaryFormData.append(key, value)
            })
            
            // ‚úÖ AGREGAR ARCHIVOS PREPARADOS CON NOMBRES DE CAMPO CORRECTOS
            const filesAdded = []
            Object.entries(preparedImages).forEach(([fieldName, fileList]) => {
                if (fileList && fileList.length > 0) {
                    if (fieldName === 'fotosExtra') {
                        // ‚úÖ FOTOS EXTRAS: Enviar todos los archivos
                        fileList.forEach(file => {
                            cloudinaryFormData.append(fieldName, file)
                        })
                        filesAdded.push(`${fieldName}: ${fileList.length} archivos`)
                    } else {
                        // ‚úÖ FOTOS PRINCIPALES: Solo el primer archivo
                        cloudinaryFormData.append(fieldName, fileList[0])
                        filesAdded.push(`${fieldName}: ${fileList[0].name}`)
                    }
                }
            })
            
            
            // ‚úÖ OBTENER TOKEN DE AUTORIZACI√ìN PRIMERO
            const token = getAuthToken()
            
            if (!token) {
                console.error('‚ùå NO SE ENCONTR√ì TOKEN - Verificando localStorage:')
                console.error(`localStorage.${AUTH_CONFIG.storage.tokenKey}:`, localStorage.getItem(AUTH_CONFIG.storage.tokenKey))
                console.error('localStorage disponible:', Object.keys(localStorage))
                throw new Error('‚ùå No se encontr√≥ token de autorizaci√≥n')
            }
            
            // ‚úÖ ENV√çO AL BACKEND usando servicio unificado
            const response = await vehiclesService.createVehicle(cloudinaryFormData)
            setSuccess(true)
            return { success: true, data: response.data }

        } catch (err) {
            console.error('‚ùå Error al crear auto:', err)
            
            // ‚úÖ LOGGING DETALLADO DEL ERROR
            if (err.response) {
                console.error('üì° Respuesta del servidor:', {
                    status: err.response.status,
                    statusText: err.response.statusText,
                    data: err.response.data,
                    headers: err.response.headers
                })
                
                // ‚úÖ MANEJO ESPEC√çFICO DE ERRORES DE AUTORIZACI√ìN
                if (err.response.status === 401) {
                    console.error('üîê Error de autorizaci√≥n - Token inv√°lido o expirado')
                } else if (err.response.status === 403) {
                    console.error('üö´ Error de permisos - No tienes acceso a este recurso')
                } else if (err.response.status === 400) {
                    console.error('üö® Error 400 - Detalles del backend:', err.response.data)
                    console.error('üö® Posible problema de formato de archivo o validaci√≥n')
                    
                }
            }
            
            // ‚úÖ MENSAJES DE ERROR ESPEC√çFICOS
            let errorMessage = 'Error desconocido al crear el auto'
            
            if (err.message.includes('token de autorizaci√≥n')) {
                errorMessage = '‚ùå Error de autorizaci√≥n: No se encontr√≥ token v√°lido'
            } else if (err.response?.status === 401) {
                errorMessage = 'üîê Error de autorizaci√≥n: Token inv√°lido o expirado'
            } else if (err.response?.status === 403) {
                errorMessage = 'üö´ Error de permisos: No tienes acceso a este recurso'
            } else if (err.response?.data?.message) {
                errorMessage = err.response.data.message
            } else if (err.response?.data?.error) {
                errorMessage = err.response.data.error
            } else if (err.message) {
                errorMessage = err.message
            }
            
            setError(errorMessage)
            return { success: false, error: errorMessage }
        } finally {
            setIsLoading(false)
        }
    }

    // ‚úÖ NUEVA FUNCI√ìN: updateCar para modo EDIT - USANDO MISMA ESTRUCTURA QUE CREATE
    const updateCar = async (id, formData) => {
        setIsLoading(true)
        setError(null)
        setSuccess(false)

        try {
            console.log('üîÑ Enviando actualizaci√≥n al endpoint...', { id })
            
            // ‚úÖ OBTENER TOKEN DE AUTORIZACI√ìN
            const token = getAuthToken()
            if (!token) {
                throw new Error('‚ùå No se encontr√≥ token de autorizaci√≥n')
            }
            
            // ‚úÖ DEBUG: LOGGING DEL FORMDATA PARA EDIT
            console.log('üîç DEBUG: Contenido del FormData para actualizaci√≥n:')
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`üìÅ ${key}:`, {
                        name: value.name,
                        size: value.size,
                        type: value.type
                    })
                } else {
                    console.log(`üìù ${key}:`, value)
                }
            }
            
            // ‚úÖ INTENTAR PRIMER ENDPOINT: PUT /photos/updatephoto/:id
            let response
            try {
                console.log('üîÑ Intentando PUT /photos/updatephoto/:id...')
                
                // ‚úÖ DEBUG EXTENDIDO: Logging completo del FormData antes del env√≠o
                console.log('üîç DEBUG COMPLETO - FormData que se enviar√°:')
                console.log('üîç ID del veh√≠culo:', id)
                console.log('üîç Headers:', {
                    'Content-Type': 'multipart/form-data',
                    'Authorization': `Bearer ${token.substring(0, 20)}...`
                })
                
                // ‚úÖ LOGGING DETALLADO DE CADA CAMPO
                for (let [key, value] of formData.entries()) {
                    if (value instanceof File) {
                        console.log(`üìÅ ${key}:`, {
                            name: value.name,
                            size: value.size,
                            type: value.type,
                            lastModified: value.lastModified
                        })
                    } else {
                        console.log(`üìù ${key}:`, value)
                    }
                }
                
                response = await vehiclesService.updateVehicle(id, formData)
                console.log('‚úÖ √âxito con PUT /photos/updatephoto/:id')
            } catch (putError) {
                console.log('‚ö†Ô∏è PUT /photos/updatephoto/:id fall√≥, intentando POST...')
                
                // ‚úÖ INTENTAR SEGUNDO ENDPOINT: POST /photos/updatephoto/:id
                try {
                    console.log('üîÑ Intentando POST /photos/updatephoto/:id...')
                    response = await vehiclesService.updateVehicle(id, formData)
                    console.log('‚úÖ √âxito con POST /photos/updatephoto/:id')
                } catch (postError) {
                    console.log('‚ö†Ô∏è POST /photos/updatephoto/:id tambi√©n fall√≥, intentando PUT /photos/:id...')
                    
                    // ‚úÖ INTENTAR TERCER ENDPOINT: PUT /photos/:id
                    try {
                        console.log('üîÑ Intentando PUT /photos/:id...')
                        // ‚úÖ NOTA: Este endpoint no existe en el servicio unificado
                        // pero mantenemos la l√≥gica para compatibilidad
                        response = await vehiclesService.updateVehicle(id, formData)
                        console.log('‚úÖ √âxito con PUT /photos/:id')
                    } catch (finalError) {
                        // ‚úÖ TODOS LOS ENDPOINTS FALLARON
                        console.error('‚ùå Todos los endpoints fallaron:')
                        console.error('PUT /photos/updatephoto/:id:', putError.response?.status, putError.response?.statusText)
                        console.error('POST /photos/updatephoto/:id:', postError.response?.status, postError.response?.statusText)
                        console.error('PUT /photos/:id:', finalError.response?.status, finalError.response?.statusText)
                        
                        // ‚úÖ LANZAR ERROR CON INFORMACI√ìN DETALLADA
                        throw new Error(`Todos los endpoints de actualizaci√≥n fallaron. Verificar configuraci√≥n del backend. √öltimo error: ${finalError.response?.status} ${finalError.response?.statusText}`)
                    }
                }
            }

            console.log('‚úÖ Respuesta de actualizaci√≥n:', response.data)
            setSuccess(true)
            return { success: true, data: response.data }

        } catch (err) {
            console.error('‚ùå Error al actualizar auto:', err)
            
            // ‚úÖ DEBUG EXTENDIDO: Logging detallado del error 400
            if (err.response?.status === 400) {
                console.error('üö® ERROR 400 - An√°lisis detallado:')
                console.error('üì° Status:', err.response.status)
                console.error('üì° StatusText:', err.response.statusText)
                console.error('üì° Data completo:', err.response.data)
                console.error('üì° Headers de respuesta:', err.response.headers)
                
                // ‚úÖ INTENTAR EXTRAER MENSAJE DE ERROR ESPEC√çFICO
                if (err.response.data) {
                    if (err.response.data.message) {
                        console.error('üîç Mensaje de error:', err.response.data.message)
                    }
                    if (err.response.data.error) {
                        console.error('üîç Error espec√≠fico:', err.response.data.error)
                    }
                    if (err.response.data.errors) {
                        console.error('üîç Errores de validaci√≥n:', err.response.data.errors)
                    }
                    if (err.response.data.msg) {
                        console.error('üîç Mensaje del backend:', err.response.data.msg)
                    }
                }
            }
            
            let errorMessage = 'Error desconocido al actualizar el auto'
            
            if (err.response?.status === 401) {
                errorMessage = 'üîê Error de autorizaci√≥n: Token inv√°lido o expirado'
            } else if (err.response?.status === 403) {
                errorMessage = 'üö´ Error de permisos: No tienes acceso a este recurso'
            } else if (err.response?.status === 404) {
                errorMessage = '‚ùå Veh√≠culo no encontrado o endpoint incorrecto'
            } else if (err.response?.status === 400) {
                // ‚úÖ MENSAJE ESPEC√çFICO PARA ERROR 400
                if (err.response.data?.message) {
                    errorMessage = `‚ùå Error de validaci√≥n: ${err.response.data.message}`
                } else if (err.response.data?.error) {
                    errorMessage = `‚ùå Error del backend: ${err.response.data.error}`
                } else if (err.response.data?.msg) {
                    errorMessage = `‚ùå Error: ${err.response.data.msg}`
                } else {
                    errorMessage = '‚ùå Error 400: Datos enviados no son v√°lidos para el backend'
                }
            } else if (err.response?.data?.message) {
                errorMessage = err.response.data.message
            } else if (err.message) {
                errorMessage = err.message
            }
            
            setError(errorMessage)
            return { success: false, error: errorMessage }
        } finally {
            setIsLoading(false)
        }
    }

    // ‚úÖ NUEVA FUNCI√ìN: deleteCar para eliminar veh√≠culos
    const deleteCar = async (id) => {
        setIsLoading(true)
        setError(null)
        setSuccess(false)

        try {
            console.log('üóëÔ∏è Enviando eliminaci√≥n al endpoint...', { id })
            
            // ‚úÖ OBTENER TOKEN DE AUTORIZACI√ìN
            const token = getAuthToken()
            if (!token) {
                throw new Error('‚ùå No se encontr√≥ token de autorizaci√≥n')
            }
            
            // ‚úÖ ENVIAR ELIMINACI√ìN usando servicio unificado
            const response = await vehiclesService.deleteVehicle(id)

            console.log('‚úÖ Respuesta de eliminaci√≥n:', response.data)
            setSuccess(true)
            return { success: true, data: response.data }

        } catch (err) {
            console.error('‚ùå Error al eliminar auto:', err)
            
            let errorMessage = 'Error desconocido al eliminar el auto'
            
            if (err.response?.status === 401) {
                errorMessage = 'üîê Error de autorizaci√≥n: Token inv√°lido o expirado'
            } else if (err.response?.status === 403) {
                errorMessage = 'üö´ Error de permisos: No tienes acceso a este recurso'
            } else if (err.response?.status === 404) {
                errorMessage = '‚ùå Veh√≠culo no encontrado'
            } else if (err.response?.data?.message) {
                errorMessage = err.response.data.message
            } else if (err.message) {
                errorMessage = err.message
            }
            
            setError(errorMessage)
            return { success: false, error: errorMessage }
        } finally {
            setIsLoading(false)
        }
    }

    const resetState = () => {
        setError(null)
        setSuccess(false)
    }

    return {
        createCar,
        updateCar,    // ‚úÖ NUEVO
        deleteCar,    // ‚úÖ NUEVO
        isLoading,
        error,
        success,
        resetState
    }
}
